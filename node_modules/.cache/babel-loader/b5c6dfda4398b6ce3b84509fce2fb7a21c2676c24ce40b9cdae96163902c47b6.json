{"ast":null,"code":"var _jsxFileName = \"/home/jeco/myprojects/icp/hopechain-frontend/src/Context/ShopContext.jsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport all_product from \"../Components/Assets/all_product\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ShopContext = /*#__PURE__*/createContext(null);\nconst getDefaultCart = () => {\n  let cart = {};\n  for (let index = 0; index < all_product.length + 1; index++) {\n    cart[index] = 0;\n  }\n  return cart;\n};\nconst ShopContextProvider = props => {\n  _s();\n  const [cartItems, setCartItems] = useState(getDefaultCart());\n  const [currency, setCurrency] = useState('USD'); // Default currency\n  const [currencySymbol, setCurrencySymbol] = useState('$'); // Default symbol\n\n  // Currency Symbols Map\n  const currencySymbols = {\n    USD: '$',\n    EUR: '€',\n    GBP: '£',\n    BTC: '₿',\n    ETH: 'Ξ',\n    ICP: 'Ξ' // Placeholder for ICP, adjust as needed\n  };\n\n  // Mock currency conversion function\n  const convertPrice = (price, targetCurrency) => {\n    // Implement actual conversion logic here (using an API or predefined conversion rates)\n    // For now, it's just returning the price without any conversion for simplicity\n    return price;\n  };\n  const handleCurrencyChange = newCurrency => {\n    setCurrency(newCurrency);\n    setCurrencySymbol(currencySymbols[newCurrency]);\n  };\n  const addToCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: prev[itemId] + 1\n    }));\n    console.log(cartItems);\n  };\n  const removeFromCart = itemId => {\n    setCartItems(prev => ({\n      ...prev,\n      [itemId]: prev[itemId] - 1\n    }));\n  };\n  const getTotalCartAmount = () => {\n    let totalAmount = 0;\n    for (const item in cartItems) {\n      if (cartItems[item] > 0) {\n        let itemInfo = all_product.find(product => product.id === Number(item));\n        totalAmount += cartItems[item] * convertPrice(itemInfo.new_price, currency);\n      }\n    }\n    return totalAmount;\n  };\n  const getTotalCartItems = () => {\n    let totalItem = 0;\n    for (const item in cartItems) {\n      if (cartItems[item] > 0) {\n        totalItem += cartItems[item];\n      }\n    }\n    return totalItem;\n  };\n  const contextValue = {\n    getTotalCartItems,\n    getTotalCartAmount,\n    all_product,\n    cartItems,\n    addToCart,\n    removeFromCart,\n    currency,\n    currencySymbol,\n    handleCurrencyChange,\n    convertPrice\n  };\n  return /*#__PURE__*/_jsxDEV(ShopContext.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n};\n_s(ShopContextProvider, \"aEiinmqYVPDyUOJ+wF84VWCoVWs=\");\n_c = ShopContextProvider;\nexport default ShopContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ShopContextProvider\");","map":{"version":3,"names":["React","createContext","useState","all_product","jsxDEV","_jsxDEV","ShopContext","getDefaultCart","cart","index","length","ShopContextProvider","props","_s","cartItems","setCartItems","currency","setCurrency","currencySymbol","setCurrencySymbol","currencySymbols","USD","EUR","GBP","BTC","ETH","ICP","convertPrice","price","targetCurrency","handleCurrencyChange","newCurrency","addToCart","itemId","prev","console","log","removeFromCart","getTotalCartAmount","totalAmount","item","itemInfo","find","product","id","Number","new_price","getTotalCartItems","totalItem","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jeco/myprojects/icp/hopechain-frontend/src/Context/ShopContext.jsx"],"sourcesContent":["import React, { createContext, useState } from \"react\";\r\nimport all_product from \"../Components/Assets/all_product\";\r\n\r\nexport const ShopContext = createContext(null);\r\n\r\nconst getDefaultCart = () => {\r\n    let cart = {};\r\n    for (let index = 0; index < all_product.length + 1; index++) {\r\n        cart[index] = 0;\r\n    }\r\n    return cart;\r\n};\r\n\r\nconst ShopContextProvider = (props) => {\r\n    const [cartItems, setCartItems] = useState(getDefaultCart());\r\n    const [currency, setCurrency] = useState('USD'); // Default currency\r\n    const [currencySymbol, setCurrencySymbol] = useState('$'); // Default symbol\r\n\r\n    // Currency Symbols Map\r\n    const currencySymbols = {\r\n        USD: '$',\r\n        EUR: '€',\r\n        GBP: '£',\r\n        BTC: '₿',\r\n        ETH: 'Ξ',\r\n        ICP: 'Ξ', // Placeholder for ICP, adjust as needed\r\n    };\r\n\r\n    // Mock currency conversion function\r\n    const convertPrice = (price, targetCurrency) => {\r\n        // Implement actual conversion logic here (using an API or predefined conversion rates)\r\n        // For now, it's just returning the price without any conversion for simplicity\r\n        return price;\r\n    };\r\n\r\n    const handleCurrencyChange = (newCurrency) => {\r\n        setCurrency(newCurrency);\r\n        setCurrencySymbol(currencySymbols[newCurrency]);\r\n    };\r\n\r\n    const addToCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] + 1 }));\r\n        console.log(cartItems);\r\n    };\r\n\r\n    const removeFromCart = (itemId) => {\r\n        setCartItems((prev) => ({ ...prev, [itemId]: prev[itemId] - 1 }));\r\n    };\r\n\r\n    const getTotalCartAmount = () => {\r\n        let totalAmount = 0;\r\n        for (const item in cartItems) {\r\n            if (cartItems[item] > 0) {\r\n                let itemInfo = all_product.find((product) => product.id === Number(item));\r\n                totalAmount += cartItems[item] * convertPrice(itemInfo.new_price, currency);\r\n            }\r\n        }\r\n        return totalAmount;\r\n    };\r\n\r\n    const getTotalCartItems = () => {\r\n        let totalItem = 0;\r\n        for (const item in cartItems) {\r\n            if (cartItems[item] > 0) {\r\n                totalItem += cartItems[item];\r\n            }\r\n        }\r\n        return totalItem;\r\n    };\r\n\r\n    const contextValue = {\r\n        getTotalCartItems,\r\n        getTotalCartAmount,\r\n        all_product,\r\n        cartItems,\r\n        addToCart,\r\n        removeFromCart,\r\n        currency,\r\n        currencySymbol,\r\n        handleCurrencyChange,\r\n        convertPrice,\r\n    };\r\n\r\n    return (\r\n        <ShopContext.Provider value={contextValue}>\r\n            {props.children}\r\n        </ShopContext.Provider>\r\n    );\r\n};\r\n\r\nexport default ShopContextProvider;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}