{"ast":null,"code":"import { Actor, HttpAgent } from \"@dfinity/agent\";\n\n// Imports and re-exports candid interface\nimport { idlFactory } from \"./hopechain-engine-backend.did.js\";\nexport { idlFactory } from \"./hopechain-engine-backend.did.js\";\n\n/* CANISTER_ID is replaced by webpack based on node environment\n * Note: canister environment variable will be standardized as\n * process.env.CANISTER_ID_<CANISTER_NAME_UPPERCASE>\n * beginning in dfx 0.15.0\n */\nexport const canisterId = process.env.CANISTER_ID_HOPECHAIN_ENGINE_BACKEND;\nexport const createActor = (canisterId, options = {}) => {\n  const agent = options.agent || new HttpAgent({\n    ...options.agentOptions\n  });\n  if (options.agent && options.agentOptions) {\n    console.warn(\"Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.\");\n  }\n\n  // Fetch root key for certificate validation during development\n  if (process.env.DFX_NETWORK !== \"ic\") {\n    agent.fetchRootKey().catch(err => {\n      console.warn(\"Unable to fetch root key. Check to ensure that your local replica is running\");\n      console.error(err);\n    });\n  }\n\n  // Creates an actor with using the candid interface and the HttpAgent\n  return Actor.createActor(idlFactory, {\n    agent,\n    canisterId,\n    ...options.actorOptions\n  });\n};\nexport const hopechain_engine_backend = canisterId ? createActor(canisterId) : undefined;","map":{"version":3,"names":["Actor","HttpAgent","idlFactory","canisterId","process","env","CANISTER_ID_HOPECHAIN_ENGINE_BACKEND","createActor","options","agent","agentOptions","console","warn","DFX_NETWORK","fetchRootKey","catch","err","error","actorOptions","hopechain_engine_backend","undefined"],"sources":["/home/jeco/myprojects/icp/hopechain-frontend/src/declarations/hopechain-engine-backend/index.js"],"sourcesContent":["import { Actor, HttpAgent } from \"@dfinity/agent\";\n\n// Imports and re-exports candid interface\nimport { idlFactory } from \"./hopechain-engine-backend.did.js\";\nexport { idlFactory } from \"./hopechain-engine-backend.did.js\";\n\n/* CANISTER_ID is replaced by webpack based on node environment\n * Note: canister environment variable will be standardized as\n * process.env.CANISTER_ID_<CANISTER_NAME_UPPERCASE>\n * beginning in dfx 0.15.0\n */\nexport const canisterId =\n  process.env.CANISTER_ID_HOPECHAIN_ENGINE_BACKEND;\n\nexport const createActor = (canisterId, options = {}) => {\n  const agent = options.agent || new HttpAgent({ ...options.agentOptions });\n\n  if (options.agent && options.agentOptions) {\n    console.warn(\n      \"Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.\"\n    );\n  }\n\n  // Fetch root key for certificate validation during development\n  if (process.env.DFX_NETWORK !== \"ic\") {\n    agent.fetchRootKey().catch((err) => {\n      console.warn(\n        \"Unable to fetch root key. Check to ensure that your local replica is running\"\n      );\n      console.error(err);\n    });\n  }\n\n  // Creates an actor with using the candid interface and the HttpAgent\n  return Actor.createActor(idlFactory, {\n    agent,\n    canisterId,\n    ...options.actorOptions,\n  });\n};\n\nexport const hopechain_engine_backend = canisterId ? createActor(canisterId) : undefined;\n"],"mappings":"AAAA,SAASA,KAAK,EAAEC,SAAS,QAAQ,gBAAgB;;AAEjD;AACA,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,SAASA,UAAU,QAAQ,mCAAmC;;AAE9D;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GACrBC,OAAO,CAACC,GAAG,CAACC,oCAAoC;AAElD,OAAO,MAAMC,WAAW,GAAGA,CAACJ,UAAU,EAAEK,OAAO,GAAG,CAAC,CAAC,KAAK;EACvD,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,IAAI,IAAIR,SAAS,CAAC;IAAE,GAAGO,OAAO,CAACE;EAAa,CAAC,CAAC;EAEzE,IAAIF,OAAO,CAACC,KAAK,IAAID,OAAO,CAACE,YAAY,EAAE;IACzCC,OAAO,CAACC,IAAI,CACV,2HACF,CAAC;EACH;;EAEA;EACA,IAAIR,OAAO,CAACC,GAAG,CAACQ,WAAW,KAAK,IAAI,EAAE;IACpCJ,KAAK,CAACK,YAAY,CAAC,CAAC,CAACC,KAAK,CAAEC,GAAG,IAAK;MAClCL,OAAO,CAACC,IAAI,CACV,8EACF,CAAC;MACDD,OAAO,CAACM,KAAK,CAACD,GAAG,CAAC;IACpB,CAAC,CAAC;EACJ;;EAEA;EACA,OAAOhB,KAAK,CAACO,WAAW,CAACL,UAAU,EAAE;IACnCO,KAAK;IACLN,UAAU;IACV,GAAGK,OAAO,CAACU;EACb,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,wBAAwB,GAAGhB,UAAU,GAAGI,WAAW,CAACJ,UAAU,CAAC,GAAGiB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}