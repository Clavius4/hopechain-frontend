{"ast":null,"code":"import * as mod from './modular.js';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.js';\n/*\nTowered extension fields\n\nRather than implementing a massive 12th-degree extension directly, it is more efficient\nto build it up from smaller extensions: a tower of extensions.\n\nFor BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\non top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n\nFor more info: \"Pairings for beginners\" by Costello, section 7.3.\n*/\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3);\nfunction calcFrobeniusCoefficients(Fp, nonResidue, modulus, degree, num = 1, divisor) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus = modulus ** BigInt(degree);\n  const res = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = (a * qPower - a) / _divisor % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp, Fp2, base) {\n  // Ψ endomorphism\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x, y) {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x, y) {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine = fn => (c, P) => {\n    const affine = P.toAffine();\n    const p = fn(affine.x, affine.y);\n    return c.fromAffine({\n      x: p[0],\n      y: p[1]\n    });\n  };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return {\n    psi,\n    psi2,\n    G2psi,\n    G2psi2,\n    PSI_X,\n    PSI_Y,\n    PSI2_X,\n    PSI2_Y\n  };\n}\nexport function tower12(opts) {\n  const {\n    ORDER\n  } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const FpLegendre = mod.FpLegendre(ORDER);\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1)\n  });\n  const Fp2Subtract = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1)\n  });\n  const Fp2Multiply = ({\n    c0,\n    c1\n  }, rhs) => {\n    if (typeof rhs === 'bigint') return {\n      c0: Fp.mul(c0, rhs),\n      c1: Fp.mul(c1, rhs)\n    };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return {\n      c0: o0,\n      c1: o1\n    };\n  };\n  const Fp2Square = ({\n    c0,\n    c1\n  }) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return {\n      c0: Fp.mul(a, b),\n      c1: Fp.mul(c, c1)\n    };\n  };\n  const Fp2fromBigTuple = tuple => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map(n => Fp.create(n));\n    return {\n      c0: fps[0],\n      c1: fps[1]\n    };\n  };\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2 = {\n    ORDER: FP2_ORDER,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: {\n      c0: Fp.ZERO,\n      c1: Fp.ZERO\n    },\n    ONE: {\n      c0: Fp.ONE,\n      c1: Fp.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1\n    }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({\n      c0,\n      c1\n    }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({\n      c0,\n      c1\n    }) => ({\n      c0: Fp.neg(c0),\n      c1: Fp.neg(c1)\n    }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) => Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({\n      c0: a,\n      c1: b\n    }) => {\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return {\n        c0: Fp.mul(factor, Fp.create(a)),\n        c1: Fp.mul(factor, Fp.create(-b))\n      };\n    },\n    sqrt: num => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const {\n        c0,\n        c1\n      } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (Fp.eql(FpLegendre(Fp, c0), Fp.ONE)) return Fp2.create({\n          c0: Fp.sqrt(c0),\n          c1: Fp.ZERO\n        });else return Fp2.create({\n          c0: Fp.ZERO,\n          c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE))\n        });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (!Fp.is0(legendre) && !Fp.eql(legendre, Fp.ONE)) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({\n        c0: a0,\n        c1: Fp.div(Fp.mul(c1, Fpdiv2), a0)\n      });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const {\n        re: re1,\n        im: im1\n      } = Fp2.reim(x1);\n      const {\n        re: re2,\n        im: im2\n      } = Fp2.reim(x2);\n      if (im1 > im2 || im1 === im2 && re1 > re2) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: x => {\n      const {\n        re: x0,\n        im: x1\n      } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || zero_0 && sign_1) == _1n;\n    },\n    // Bytes util\n    fromBytes(b) {\n      if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)),\n        c1: Fp.fromBytes(b.subarray(Fp.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1\n    }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }, c) => ({\n      c0: Fp.cmov(c0, r0, c),\n      c1: Fp.cmov(c1, r1, c)\n    }),\n    reim: ({\n      c0,\n      c1\n    }) => ({\n      re: c0,\n      im: c1\n    }),\n    // multiply by u + 1\n    mulByNonresidue: ({\n      c0,\n      c1\n    }) => Fp2.mul({\n      c0,\n      c1\n    }, Fp2Nonresidue),\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: ({\n      c0,\n      c1\n    }, power) => ({\n      c0,\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2])\n    })\n  };\n  // Fp6\n  const Fp6Add = ({\n    c0,\n    c1,\n    c2\n  }, {\n    c0: r0,\n    c1: r1,\n    c2: r2\n  }) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2)\n  });\n  const Fp6Subtract = ({\n    c0,\n    c1,\n    c2\n  }, {\n    c0: r0,\n    c1: r1,\n    c2: r2\n  }) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2)\n  });\n  const Fp6Multiply = ({\n    c0,\n    c1,\n    c2\n  }, rhs) => {\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs)\n      };\n    }\n    const {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(t0, Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)), Fp2.mulByNonresidue(t2)),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2))\n    };\n  };\n  const Fp6Square = ({\n    c0,\n    c1,\n    c2\n  }) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0),\n      // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1),\n      // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4)\n    };\n  };\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 6, 2, 3);\n  const Fp6 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: {\n      c0: Fp2.ZERO,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    ONE: {\n      c0: Fp2.ONE,\n      c1: Fp2.ZERO,\n      c2: Fp2.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1,\n      c2\n    }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({\n      c0,\n      c1,\n      c2\n    }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({\n      c0,\n      c1,\n      c2\n    }) => ({\n      c0: Fp2.neg(c0),\n      c1: Fp2.neg(c1),\n      c2: Fp2.neg(c2)\n    }),\n    eql: ({\n      c0,\n      c1,\n      c2\n    }, {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    }) => Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) => Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n    inv: ({\n      c0,\n      c1,\n      c2\n    }) => {\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0)));\n      return {\n        c0: Fp2.mul(t4, t0),\n        c1: Fp2.mul(t4, t1),\n        c2: Fp2.mul(t4, t2)\n      };\n    },\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1,\n      c2\n    }) => concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({\n      c0,\n      c1,\n      c2\n    }, {\n      c0: r0,\n      c1: r1,\n      c2: r2\n    }, c) => ({\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c)\n    }),\n    fromBigSix: t => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6))\n      };\n    },\n    frobeniusMap: ({\n      c0,\n      c1,\n      c2\n    }, power) => ({\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6])\n    }),\n    mulByFp2: ({\n      c0,\n      c1,\n      c2\n    }, rhs) => ({\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs)\n    }),\n    mulByNonresidue: ({\n      c0,\n      c1,\n      c2\n    }) => ({\n      c0: Fp2.mulByNonresidue(c2),\n      c1: c0,\n      c2: c1\n    }),\n    // Sparse multiplication\n    mul1: ({\n      c0,\n      c1,\n      c2\n    }, b1) => ({\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1)\n    }),\n    // Sparse multiplication\n    mul01({\n      c0,\n      c1,\n      c2\n    }, b0, b1) {\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1)\n      };\n    }\n  };\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp2, Fp2Nonresidue, Fp.ORDER, 12, 1, 6)[0];\n  const Fp12Add = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1)\n  });\n  const Fp12Subtract = ({\n    c0,\n    c1\n  }, {\n    c0: r0,\n    c1: r1\n  }) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1)\n  });\n  const Fp12Multiply = ({\n    c0,\n    c1\n  }, rhs) => {\n    if (typeof rhs === 'bigint') return {\n      c0: Fp6.mul(c0, rhs),\n      c1: Fp6.mul(c1, rhs)\n    };\n    let {\n      c0: r0,\n      c1: r1\n    } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)),\n      // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2))\n    };\n  };\n  const Fp12Square = ({\n    c0,\n    c1\n  }) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab), Fp6.mulByNonresidue(ab)),\n      c1: Fp6.add(ab, ab)\n    }; // AB + AB\n  };\n  function Fp4Square(a, b) {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2),\n      // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2) // (a + b)² - a² - b²\n    };\n  }\n  const Fp12 = {\n    ORDER: Fp2.ORDER,\n    // TODO: unused, but need to verify\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: {\n      c0: Fp6.ZERO,\n      c1: Fp6.ZERO\n    },\n    ONE: {\n      c0: Fp6.ONE,\n      c1: Fp6.ZERO\n    },\n    create: num => num,\n    isValid: ({\n      c0,\n      c1\n    }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({\n      c0,\n      c1\n    }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({\n      c0,\n      c1\n    }) => ({\n      c0: Fp6.neg(c0),\n      c1: Fp6.neg(c1)\n    }),\n    eql: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: notImplemented,\n    inv: ({\n      c0,\n      c1\n    }) => {\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return {\n        c0: Fp6.mul(c0, t),\n        c1: Fp6.neg(Fp6.mul(c1, t))\n      }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) => Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: nums => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n    // Bytes utils\n    fromBytes: b => {\n      if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES))\n      };\n    },\n    toBytes: ({\n      c0,\n      c1\n    }) => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({\n      c0,\n      c1\n    }, {\n      c0: r0,\n      c1: r1\n    }, c) => ({\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c)\n    }),\n    // Utils\n    // toString() {\n    //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: t => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6)),\n      c1: Fp6.fromBigSix(t.slice(6, 12))\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power) {\n      const {\n        c0,\n        c1,\n        c2\n      } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff)\n        })\n      };\n    },\n    mulByFp2: ({\n      c0,\n      c1\n    }, rhs) => ({\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs)\n    }),\n    conjugate: ({\n      c0,\n      c1\n    }) => ({\n      c0,\n      c1: Fp6.neg(c1)\n    }),\n    // Sparse multiplication\n    mul014: ({\n      c0,\n      c1\n    }, o0, o1, o4) => {\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0),\n        // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1)\n      };\n    },\n    mul034: ({\n      c0,\n      c1\n    }, o0, o3, o4) => {\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0)\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b))\n      };\n    },\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate\n  };\n  return {\n    Fp,\n    Fp2,\n    Fp6,\n    Fp4Square,\n    Fp12\n  };\n}","map":{"version":3,"names":["mod","bitLen","bitMask","concatBytes","notImplemented","_0n","BigInt","_1n","_2n","_3n","calcFrobeniusCoefficients","Fp","nonResidue","modulus","degree","num","divisor","_divisor","undefined","towerModulus","res","i","a","powers","j","qPower","power","push","pow","psiFrobenius","Fp2","base","PSI_X","ORDER","PSI_Y","psi","x","y","x2","mul","frobeniusMap","y2","PSI2_X","PSI2_Y","eql","neg","ONE","Error","psi2","mapAffine","fn","c","P","affine","toAffine","p","fromAffine","G2psi","G2psi2","tower12","opts","Field","FpNONRESIDUE","create","NONRESIDUE","FpLegendre","Fpdiv2","div","FP2_FROBENIUS_COEFFICIENTS","Fp2Add","c0","c1","r0","r1","add","Fp2Subtract","sub","Fp2Multiply","rhs","t1","t2","o0","o1","Fp2Square","b","Fp2fromBigTuple","tuple","length","fps","map","n","FP2_ORDER","Fp2Nonresidue","FP2_NONRESIDUE","BITS","BYTES","Math","ceil","MASK","ZERO","isValid","is0","FpPow","invertBatch","nums","FpInvertBatch","sqr","addN","subN","mulN","sqrN","lhs","inv","factor","sqrt","Fp2sqrt","d","legendre","a0","candidateSqrt","x1","re","re1","im","im1","reim","re2","im2","isOdd","x0","sign_0","zero_0","sign_1","fromBytes","subarray","toBytes","cmov","mulByNonresidue","mulByB","Fp2mulByB","fromBigTuple","Fp6Add","c2","r2","Fp6Subtract","Fp6Multiply","t0","Fp6Square","t3","t4","FP6_FROBENIUS_COEFFICIENTS_1","FP6_FROBENIUS_COEFFICIENTS_2","Fp6","fromBigSix","t","Array","isArray","slice","mulByFp2","mul1","b1","mul01","b0","FP12_FROBENIUS_COEFFICIENTS","Fp12Add","Fp12Subtract","Fp12Multiply","Fp12Square","ab","Fp4Square","a2","b2","first","second","Fp12","fromBigTwelve","coeff","conjugate","mul014","o4","mul034","o3","e","_cyclotomicSquare","Fp12cyclotomicSquare","_cyclotomicExp","Fp12cyclotomicExp","finalExponentiate","Fp12finalExponentiate"],"sources":["/home/jeco/myprojects/icp/hopechain-frontend/node_modules/@noble/curves/src/abstract/tower.ts"],"sourcesContent":["import * as mod from './modular.js';\nimport { bitLen, bitMask, concatBytes, notImplemented } from './utils.js';\nimport type { ProjConstructor, ProjPointType } from './weierstrass.js';\n\n/*\nTowered extension fields\n\nRather than implementing a massive 12th-degree extension directly, it is more efficient\nto build it up from smaller extensions: a tower of extensions.\n\nFor BLS12-381, the Fp12 field is implemented as a quadratic (degree two) extension,\non top of a cubic (degree three) extension, on top of a quadratic extension of Fp.\n\nFor more info: \"Pairings for beginners\" by Costello, section 7.3.\n*/\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n\n// Fp₂ over complex plane\nexport type BigintTuple = [bigint, bigint];\nexport type Fp = bigint;\n// Finite extension field over irreducible polynominal.\n// Fp(u) / (u² - β) where β = -1\nexport type Fp2 = { c0: bigint; c1: bigint };\nexport type BigintSix = [bigint, bigint, bigint, bigint, bigint, bigint];\nexport type Fp6 = { c0: Fp2; c1: Fp2; c2: Fp2 };\nexport type Fp12 = { c0: Fp6; c1: Fp6 }; // Fp₁₂ = Fp₆² => Fp₂³, Fp₆(w) / (w² - γ) where γ = v\n// prettier-ignore\nexport type BigintTwelve = [\n  bigint, bigint, bigint, bigint, bigint, bigint,\n  bigint, bigint, bigint, bigint, bigint, bigint\n];\n\nexport type Fp2Bls = mod.IField<Fp2> & {\n  reim: (num: Fp2) => { re: Fp; im: Fp };\n  mulByB: (num: Fp2) => Fp2;\n  frobeniusMap(num: Fp2, power: number): Fp2;\n  fromBigTuple(num: [bigint, bigint]): Fp2;\n};\n\nexport type Fp12Bls = mod.IField<Fp12> & {\n  frobeniusMap(num: Fp12, power: number): Fp12;\n  mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n  mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n  conjugate(num: Fp12): Fp12;\n  finalExponentiate(num: Fp12): Fp12;\n};\n\nfunction calcFrobeniusCoefficients<T>(\n  Fp: mod.IField<T>,\n  nonResidue: T,\n  modulus: bigint,\n  degree: number,\n  num: number = 1,\n  divisor?: number\n) {\n  const _divisor = BigInt(divisor === undefined ? degree : divisor);\n  const towerModulus: any = modulus ** BigInt(degree);\n  const res: T[][] = [];\n  for (let i = 0; i < num; i++) {\n    const a = BigInt(i + 1);\n    const powers: T[] = [];\n    for (let j = 0, qPower = _1n; j < degree; j++) {\n      const power = ((a * qPower - a) / _divisor) % towerModulus;\n      powers.push(Fp.pow(nonResidue, power));\n      qPower *= modulus;\n    }\n    res.push(powers);\n  }\n  return res;\n}\n\n// This works same at least for bls12-381, bn254 and bls12-377\nexport function psiFrobenius(Fp: mod.IField<Fp>, Fp2: Fp2Bls, base: Fp2) {\n  // Ψ endomorphism\n  const PSI_X = Fp2.pow(base, (Fp.ORDER - _1n) / _3n); // u^((p-1)/3)\n  const PSI_Y = Fp2.pow(base, (Fp.ORDER - _1n) / _2n); // u^((p-1)/2)\n  function psi(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    // This x10 faster than previous version in bls12-381\n    const x2 = Fp2.mul(Fp2.frobeniusMap(x, 1), PSI_X);\n    const y2 = Fp2.mul(Fp2.frobeniusMap(y, 1), PSI_Y);\n    return [x2, y2];\n  }\n  // Ψ²(P) endomorphism (psi2(x) = psi(psi(x)))\n  const PSI2_X = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _3n); // u^((p^2 - 1)/3)\n  // This equals -1, which causes y to be Fp2.neg(y).\n  // But not sure if there are case when this is not true?\n  const PSI2_Y = Fp2.pow(base, (Fp.ORDER ** _2n - _1n) / _2n); // u^((p^2 - 1)/3)\n  if (!Fp2.eql(PSI2_Y, Fp2.neg(Fp2.ONE))) throw new Error('psiFrobenius: PSI2_Y!==-1');\n  function psi2(x: Fp2, y: Fp2): [Fp2, Fp2] {\n    return [Fp2.mul(x, PSI2_X), Fp2.neg(y)];\n  }\n  // Map points\n  const mapAffine =\n    <T>(fn: (x: T, y: T) => [T, T]) =>\n    (c: ProjConstructor<T>, P: ProjPointType<T>) => {\n      const affine = P.toAffine();\n      const p = fn(affine.x, affine.y);\n      return c.fromAffine({ x: p[0], y: p[1] });\n    };\n  const G2psi = mapAffine(psi);\n  const G2psi2 = mapAffine(psi2);\n  return { psi, psi2, G2psi, G2psi2, PSI_X, PSI_Y, PSI2_X, PSI2_Y };\n}\n\nexport type Tower12Opts = {\n  ORDER: bigint;\n  NONRESIDUE?: Fp;\n  // Fp2\n  FP2_NONRESIDUE: BigintTuple;\n  Fp2sqrt?: (num: Fp2) => Fp2;\n  Fp2mulByB: (num: Fp2) => Fp2;\n  // Fp12\n  Fp12cyclotomicSquare: (num: Fp12) => Fp12;\n  Fp12cyclotomicExp: (num: Fp12, n: bigint) => Fp12;\n  Fp12finalExponentiate: (num: Fp12) => Fp12;\n};\n\nexport function tower12(opts: Tower12Opts) {\n  const { ORDER } = opts;\n  // Fp\n  const Fp = mod.Field(ORDER);\n  const FpNONRESIDUE = Fp.create(opts.NONRESIDUE || BigInt(-1));\n  const FpLegendre = mod.FpLegendre(ORDER);\n  const Fpdiv2 = Fp.div(Fp.ONE, _2n); // 1/2\n\n  // Fp2\n  const FP2_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(Fp, FpNONRESIDUE, Fp.ORDER, 2)[0];\n  const Fp2Add = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.add(c0, r0),\n    c1: Fp.add(c1, r1),\n  });\n  const Fp2Subtract = ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => ({\n    c0: Fp.sub(c0, r0),\n    c1: Fp.sub(c1, r1),\n  });\n  const Fp2Multiply = ({ c0, c1 }: Fp2, rhs: Fp2) => {\n    if (typeof rhs === 'bigint') return { c0: Fp.mul(c0, rhs), c1: Fp.mul(c1, rhs) };\n    // (a+bi)(c+di) = (ac−bd) + (ad+bc)i\n    const { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp.mul(c0, r0); // c0 * o0\n    let t2 = Fp.mul(c1, r1); // c1 * o1\n    // (T1 - T2) + ((c0 + c1) * (r0 + r1) - (T1 + T2))*i\n    const o0 = Fp.sub(t1, t2);\n    const o1 = Fp.sub(Fp.mul(Fp.add(c0, c1), Fp.add(r0, r1)), Fp.add(t1, t2));\n    return { c0: o0, c1: o1 };\n  };\n  const Fp2Square = ({ c0, c1 }: Fp2) => {\n    const a = Fp.add(c0, c1);\n    const b = Fp.sub(c0, c1);\n    const c = Fp.add(c0, c0);\n    return { c0: Fp.mul(a, b), c1: Fp.mul(c, c1) };\n  };\n  type Fp2Utils = {\n    NONRESIDUE: Fp2;\n    fromBigTuple: (tuple: BigintTuple | bigint[]) => Fp2;\n    reim: (num: Fp2) => { re: bigint; im: bigint };\n    mulByNonresidue: (num: Fp2) => Fp2;\n    mulByB: (num: Fp2) => Fp2;\n    frobeniusMap(num: Fp2, power: number): Fp2;\n  };\n  const Fp2fromBigTuple = (tuple: BigintTuple | bigint[]) => {\n    if (tuple.length !== 2) throw new Error('Invalid tuple');\n    const fps = tuple.map((n) => Fp.create(n)) as [Fp, Fp];\n    return { c0: fps[0], c1: fps[1] };\n  };\n\n  const FP2_ORDER = ORDER * ORDER;\n  const Fp2Nonresidue = Fp2fromBigTuple(opts.FP2_NONRESIDUE);\n  const Fp2: mod.IField<Fp2> & Fp2Utils = {\n    ORDER: FP2_ORDER,\n    NONRESIDUE: Fp2Nonresidue,\n    BITS: bitLen(FP2_ORDER),\n    BYTES: Math.ceil(bitLen(FP2_ORDER) / 8),\n    MASK: bitMask(bitLen(FP2_ORDER)),\n    ZERO: { c0: Fp.ZERO, c1: Fp.ZERO },\n    ONE: { c0: Fp.ONE, c1: Fp.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => typeof c0 === 'bigint' && typeof c1 === 'bigint',\n    is0: ({ c0, c1 }) => Fp.is0(c0) && Fp.is0(c1),\n    eql: ({ c0, c1 }: Fp2, { c0: r0, c1: r1 }: Fp2) => Fp.eql(c0, r0) && Fp.eql(c1, r1),\n    neg: ({ c0, c1 }) => ({ c0: Fp.neg(c0), c1: Fp.neg(c1) }),\n    pow: (num, power) => mod.FpPow(Fp2, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp2, nums),\n    // Normalized\n    add: Fp2Add,\n    sub: Fp2Subtract,\n    mul: Fp2Multiply,\n    sqr: Fp2Square,\n    // NonNormalized stuff\n    addN: Fp2Add,\n    subN: Fp2Subtract,\n    mulN: Fp2Multiply,\n    sqrN: Fp2Square,\n    // Why inversion for bigint inside Fp instead of Fp2? it is even used in that context?\n    div: (lhs, rhs) =>\n      Fp2.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp2.inv(rhs)),\n    inv: ({ c0: a, c1: b }) => {\n      // We wish to find the multiplicative inverse of a nonzero\n      // element a + bu in Fp2. We leverage an identity\n      //\n      // (a + bu)(a - bu) = a² + b²\n      //\n      // which holds because u² = -1. This can be rewritten as\n      //\n      // (a + bu)(a - bu)/(a² + b²) = 1\n      //\n      // because a² + b² = 0 has no nonzero solutions for (a, b).\n      // This gives that (a - bu)/(a² + b²) is the inverse\n      // of (a + bu). Importantly, this can be computing using\n      // only a single inversion in Fp.\n      const factor = Fp.inv(Fp.create(a * a + b * b));\n      return { c0: Fp.mul(factor, Fp.create(a)), c1: Fp.mul(factor, Fp.create(-b)) };\n    },\n    sqrt: (num) => {\n      if (opts.Fp2sqrt) return opts.Fp2sqrt(num);\n      // This is generic for all quadratic extensions (Fp2)\n      const { c0, c1 } = num;\n      if (Fp.is0(c1)) {\n        // if c0 is quadratic residue\n        if (Fp.eql(FpLegendre(Fp, c0), Fp.ONE)) return Fp2.create({ c0: Fp.sqrt(c0), c1: Fp.ZERO });\n        else return Fp2.create({ c0: Fp.ZERO, c1: Fp.sqrt(Fp.div(c0, FpNONRESIDUE)) });\n      }\n      const a = Fp.sqrt(Fp.sub(Fp.sqr(c0), Fp.mul(Fp.sqr(c1), FpNONRESIDUE)));\n      let d = Fp.mul(Fp.add(a, c0), Fpdiv2);\n      const legendre = FpLegendre(Fp, d);\n      // -1, Quadratic non residue\n      if (!Fp.is0(legendre) && !Fp.eql(legendre, Fp.ONE)) d = Fp.sub(d, a);\n      const a0 = Fp.sqrt(d);\n      const candidateSqrt = Fp2.create({ c0: a0, c1: Fp.div(Fp.mul(c1, Fpdiv2), a0) });\n      if (!Fp2.eql(Fp2.sqr(candidateSqrt), num)) throw new Error('Cannot find square root');\n      // Normalize root: at this point candidateSqrt ** 2 = num, but also -candidateSqrt ** 2 = num\n      const x1 = candidateSqrt;\n      const x2 = Fp2.neg(x1);\n      const { re: re1, im: im1 } = Fp2.reim(x1);\n      const { re: re2, im: im2 } = Fp2.reim(x2);\n      if (im1 > im2 || (im1 === im2 && re1 > re2)) return x1;\n      return x2;\n    },\n    // Same as sgn0_m_eq_2 in RFC 9380\n    isOdd: (x: Fp2) => {\n      const { re: x0, im: x1 } = Fp2.reim(x);\n      const sign_0 = x0 % _2n;\n      const zero_0 = x0 === _0n;\n      const sign_1 = x1 % _2n;\n      return BigInt(sign_0 || (zero_0 && sign_1)) == _1n;\n    },\n    // Bytes util\n    fromBytes(b: Uint8Array): Fp2 {\n      if (b.length !== Fp2.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return { c0: Fp.fromBytes(b.subarray(0, Fp.BYTES)), c1: Fp.fromBytes(b.subarray(Fp.BYTES)) };\n    },\n    toBytes: ({ c0, c1 }) => concatBytes(Fp.toBytes(c0), Fp.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp.cmov(c0, r0, c),\n      c1: Fp.cmov(c1, r1, c),\n    }),\n    reim: ({ c0, c1 }) => ({ re: c0, im: c1 }),\n    // multiply by u + 1\n    mulByNonresidue: ({ c0, c1 }) => Fp2.mul({ c0, c1 }, Fp2Nonresidue),\n    mulByB: opts.Fp2mulByB,\n    fromBigTuple: Fp2fromBigTuple,\n    frobeniusMap: ({ c0, c1 }, power: number): Fp2 => ({\n      c0,\n      c1: Fp.mul(c1, FP2_FROBENIUS_COEFFICIENTS[power % 2]),\n    }),\n  };\n  // Fp6\n  const Fp6Add = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.add(c0, r0),\n    c1: Fp2.add(c1, r1),\n    c2: Fp2.add(c2, r2),\n  });\n  const Fp6Subtract = ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6) => ({\n    c0: Fp2.sub(c0, r0),\n    c1: Fp2.sub(c1, r1),\n    c2: Fp2.sub(c2, r2),\n  });\n  const Fp6Multiply = ({ c0, c1, c2 }: Fp6, rhs: Fp6 | bigint) => {\n    if (typeof rhs === 'bigint') {\n      return {\n        c0: Fp2.mul(c0, rhs),\n        c1: Fp2.mul(c1, rhs),\n        c2: Fp2.mul(c2, rhs),\n      };\n    }\n    const { c0: r0, c1: r1, c2: r2 } = rhs;\n    const t0 = Fp2.mul(c0, r0); // c0 * o0\n    const t1 = Fp2.mul(c1, r1); // c1 * o1\n    const t2 = Fp2.mul(c2, r2); // c2 * o2\n    return {\n      // t0 + (c1 + c2) * (r1 * r2) - (T1 + T2) * (u + 1)\n      c0: Fp2.add(\n        t0,\n        Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), Fp2.add(r1, r2)), Fp2.add(t1, t2)))\n      ),\n      // (c0 + c1) * (r0 + r1) - (T0 + T1) + T2 * (u + 1)\n      c1: Fp2.add(\n        Fp2.sub(Fp2.mul(Fp2.add(c0, c1), Fp2.add(r0, r1)), Fp2.add(t0, t1)),\n        Fp2.mulByNonresidue(t2)\n      ),\n      // T1 + (c0 + c2) * (r0 + r2) - T0 + T2\n      c2: Fp2.sub(Fp2.add(t1, Fp2.mul(Fp2.add(c0, c2), Fp2.add(r0, r2))), Fp2.add(t0, t2)),\n    };\n  };\n  const Fp6Square = ({ c0, c1, c2 }: Fp6) => {\n    let t0 = Fp2.sqr(c0); // c0²\n    let t1 = Fp2.mul(Fp2.mul(c0, c1), _2n); // 2 * c0 * c1\n    let t3 = Fp2.mul(Fp2.mul(c1, c2), _2n); // 2 * c1 * c2\n    let t4 = Fp2.sqr(c2); // c2²\n    return {\n      c0: Fp2.add(Fp2.mulByNonresidue(t3), t0), // T3 * (u + 1) + T0\n      c1: Fp2.add(Fp2.mulByNonresidue(t4), t1), // T4 * (u + 1) + T1\n      // T1 + (c0 - c1 + c2)² + T3 - T0 - T4\n      c2: Fp2.sub(Fp2.sub(Fp2.add(Fp2.add(t1, Fp2.sqr(Fp2.add(Fp2.sub(c0, c1), c2))), t3), t0), t4),\n    };\n  };\n  type Fp6Utils = {\n    fromBigSix: (tuple: BigintSix) => Fp6;\n    mulByNonresidue: (num: Fp6) => Fp6;\n    frobeniusMap(num: Fp6, power: number): Fp6;\n    mul1(num: Fp6, b1: Fp2): Fp6;\n    mul01(num: Fp6, b0: Fp2, b1: Fp2): Fp6;\n    mulByFp2(lhs: Fp6, rhs: Fp2): Fp6;\n  };\n\n  const [FP6_FROBENIUS_COEFFICIENTS_1, FP6_FROBENIUS_COEFFICIENTS_2] = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    6,\n    2,\n    3\n  );\n\n  const Fp6: mod.IField<Fp6> & Fp6Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 3 * Fp2.BITS,\n    BYTES: 3 * Fp2.BYTES,\n    MASK: bitMask(3 * Fp2.BITS),\n    ZERO: { c0: Fp2.ZERO, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    ONE: { c0: Fp2.ONE, c1: Fp2.ZERO, c2: Fp2.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1, c2 }) => Fp2.isValid(c0) && Fp2.isValid(c1) && Fp2.isValid(c2),\n    is0: ({ c0, c1, c2 }) => Fp2.is0(c0) && Fp2.is0(c1) && Fp2.is0(c2),\n    neg: ({ c0, c1, c2 }) => ({ c0: Fp2.neg(c0), c1: Fp2.neg(c1), c2: Fp2.neg(c2) }),\n    eql: ({ c0, c1, c2 }, { c0: r0, c1: r1, c2: r2 }) =>\n      Fp2.eql(c0, r0) && Fp2.eql(c1, r1) && Fp2.eql(c2, r2),\n    sqrt: notImplemented,\n    // Do we need division by bigint at all? Should be done via order:\n    div: (lhs, rhs) =>\n      Fp6.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp6.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp6, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp6, nums),\n    // Normalized\n    add: Fp6Add,\n    sub: Fp6Subtract,\n    mul: Fp6Multiply,\n    sqr: Fp6Square,\n    // NonNormalized stuff\n    addN: Fp6Add,\n    subN: Fp6Subtract,\n    mulN: Fp6Multiply,\n    sqrN: Fp6Square,\n\n    inv: ({ c0, c1, c2 }) => {\n      let t0 = Fp2.sub(Fp2.sqr(c0), Fp2.mulByNonresidue(Fp2.mul(c2, c1))); // c0² - c2 * c1 * (u + 1)\n      let t1 = Fp2.sub(Fp2.mulByNonresidue(Fp2.sqr(c2)), Fp2.mul(c0, c1)); // c2² * (u + 1) - c0 * c1\n      let t2 = Fp2.sub(Fp2.sqr(c1), Fp2.mul(c0, c2)); // c1² - c0 * c2\n      // 1/(((c2 * T1 + c1 * T2) * v) + c0 * T0)\n      let t4 = Fp2.inv(\n        Fp2.add(Fp2.mulByNonresidue(Fp2.add(Fp2.mul(c2, t1), Fp2.mul(c1, t2))), Fp2.mul(c0, t0))\n      );\n      return { c0: Fp2.mul(t4, t0), c1: Fp2.mul(t4, t1), c2: Fp2.mul(t4, t2) };\n    },\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp6 => {\n      if (b.length !== Fp6.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp2.fromBytes(b.subarray(0, Fp2.BYTES)),\n        c1: Fp2.fromBytes(b.subarray(Fp2.BYTES, 2 * Fp2.BYTES)),\n        c2: Fp2.fromBytes(b.subarray(2 * Fp2.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1, c2 }): Uint8Array =>\n      concatBytes(Fp2.toBytes(c0), Fp2.toBytes(c1), Fp2.toBytes(c2)),\n    cmov: ({ c0, c1, c2 }: Fp6, { c0: r0, c1: r1, c2: r2 }: Fp6, c) => ({\n      c0: Fp2.cmov(c0, r0, c),\n      c1: Fp2.cmov(c1, r1, c),\n      c2: Fp2.cmov(c2, r2, c),\n    }),\n    fromBigSix: (t: BigintSix): Fp6 => {\n      if (!Array.isArray(t) || t.length !== 6) throw new Error('Invalid Fp6 usage');\n      return {\n        c0: Fp2.fromBigTuple(t.slice(0, 2)),\n        c1: Fp2.fromBigTuple(t.slice(2, 4)),\n        c2: Fp2.fromBigTuple(t.slice(4, 6)),\n      };\n    },\n    frobeniusMap: ({ c0, c1, c2 }, power: number) => ({\n      c0: Fp2.frobeniusMap(c0, power),\n      c1: Fp2.mul(Fp2.frobeniusMap(c1, power), FP6_FROBENIUS_COEFFICIENTS_1[power % 6]),\n      c2: Fp2.mul(Fp2.frobeniusMap(c2, power), FP6_FROBENIUS_COEFFICIENTS_2[power % 6]),\n    }),\n    mulByFp2: ({ c0, c1, c2 }, rhs: Fp2): Fp6 => ({\n      c0: Fp2.mul(c0, rhs),\n      c1: Fp2.mul(c1, rhs),\n      c2: Fp2.mul(c2, rhs),\n    }),\n    mulByNonresidue: ({ c0, c1, c2 }) => ({ c0: Fp2.mulByNonresidue(c2), c1: c0, c2: c1 }),\n    // Sparse multiplication\n    mul1: ({ c0, c1, c2 }, b1: Fp2): Fp6 => ({\n      c0: Fp2.mulByNonresidue(Fp2.mul(c2, b1)),\n      c1: Fp2.mul(c0, b1),\n      c2: Fp2.mul(c1, b1),\n    }),\n    // Sparse multiplication\n    mul01({ c0, c1, c2 }, b0: Fp2, b1: Fp2): Fp6 {\n      let t0 = Fp2.mul(c0, b0); // c0 * b0\n      let t1 = Fp2.mul(c1, b1); // c1 * b1\n      return {\n        // ((c1 + c2) * b1 - T1) * (u + 1) + T0\n        c0: Fp2.add(Fp2.mulByNonresidue(Fp2.sub(Fp2.mul(Fp2.add(c1, c2), b1), t1)), t0),\n        // (b0 + b1) * (c0 + c1) - T0 - T1\n        c1: Fp2.sub(Fp2.sub(Fp2.mul(Fp2.add(b0, b1), Fp2.add(c0, c1)), t0), t1),\n        // (c0 + c2) * b0 - T0 + T1\n        c2: Fp2.add(Fp2.sub(Fp2.mul(Fp2.add(c0, c2), b0), t0), t1),\n      };\n    },\n  };\n\n  // Fp12\n  const FP12_FROBENIUS_COEFFICIENTS = calcFrobeniusCoefficients(\n    Fp2,\n    Fp2Nonresidue,\n    Fp.ORDER,\n    12,\n    1,\n    6\n  )[0];\n\n  const Fp12Add = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.add(c0, r0),\n    c1: Fp6.add(c1, r1),\n  });\n  const Fp12Subtract = ({ c0, c1 }: Fp12, { c0: r0, c1: r1 }: Fp12) => ({\n    c0: Fp6.sub(c0, r0),\n    c1: Fp6.sub(c1, r1),\n  });\n  const Fp12Multiply = ({ c0, c1 }: Fp12, rhs: Fp12 | bigint) => {\n    if (typeof rhs === 'bigint') return { c0: Fp6.mul(c0, rhs), c1: Fp6.mul(c1, rhs) };\n    let { c0: r0, c1: r1 } = rhs;\n    let t1 = Fp6.mul(c0, r0); // c0 * r0\n    let t2 = Fp6.mul(c1, r1); // c1 * r1\n    return {\n      c0: Fp6.add(t1, Fp6.mulByNonresidue(t2)), // T1 + T2 * v\n      // (c0 + c1) * (r0 + r1) - (T1 + T2)\n      c1: Fp6.sub(Fp6.mul(Fp6.add(c0, c1), Fp6.add(r0, r1)), Fp6.add(t1, t2)),\n    };\n  };\n  const Fp12Square = ({ c0, c1 }: Fp12) => {\n    let ab = Fp6.mul(c0, c1); // c0 * c1\n    return {\n      // (c1 * v + c0) * (c0 + c1) - AB - AB * v\n      c0: Fp6.sub(\n        Fp6.sub(Fp6.mul(Fp6.add(Fp6.mulByNonresidue(c1), c0), Fp6.add(c0, c1)), ab),\n        Fp6.mulByNonresidue(ab)\n      ),\n      c1: Fp6.add(ab, ab),\n    }; // AB + AB\n  };\n  function Fp4Square(a: Fp2, b: Fp2): { first: Fp2; second: Fp2 } {\n    const a2 = Fp2.sqr(a);\n    const b2 = Fp2.sqr(b);\n    return {\n      first: Fp2.add(Fp2.mulByNonresidue(b2), a2), // b² * Nonresidue + a²\n      second: Fp2.sub(Fp2.sub(Fp2.sqr(Fp2.add(a, b)), a2), b2), // (a + b)² - a² - b²\n    };\n  }\n  type Fp12Utils = {\n    fromBigTwelve: (t: BigintTwelve) => Fp12;\n    frobeniusMap(num: Fp12, power: number): Fp12;\n    mul014(num: Fp12, o0: Fp2, o1: Fp2, o4: Fp2): Fp12;\n    mul034(num: Fp12, o0: Fp2, o3: Fp2, o4: Fp2): Fp12;\n    mulByFp2(lhs: Fp12, rhs: Fp2): Fp12;\n    conjugate(num: Fp12): Fp12;\n    finalExponentiate(num: Fp12): Fp12;\n    _cyclotomicSquare(num: Fp12): Fp12;\n    _cyclotomicExp(num: Fp12, n: bigint): Fp12;\n  };\n\n  const Fp12: mod.IField<Fp12> & Fp12Utils = {\n    ORDER: Fp2.ORDER, // TODO: unused, but need to verify\n    BITS: 2 * Fp2.BITS,\n    BYTES: 2 * Fp2.BYTES,\n    MASK: bitMask(2 * Fp2.BITS),\n    ZERO: { c0: Fp6.ZERO, c1: Fp6.ZERO },\n    ONE: { c0: Fp6.ONE, c1: Fp6.ZERO },\n    create: (num) => num,\n    isValid: ({ c0, c1 }) => Fp6.isValid(c0) && Fp6.isValid(c1),\n    is0: ({ c0, c1 }) => Fp6.is0(c0) && Fp6.is0(c1),\n    neg: ({ c0, c1 }) => ({ c0: Fp6.neg(c0), c1: Fp6.neg(c1) }),\n    eql: ({ c0, c1 }, { c0: r0, c1: r1 }) => Fp6.eql(c0, r0) && Fp6.eql(c1, r1),\n    sqrt: notImplemented,\n    inv: ({ c0, c1 }) => {\n      let t = Fp6.inv(Fp6.sub(Fp6.sqr(c0), Fp6.mulByNonresidue(Fp6.sqr(c1)))); // 1 / (c0² - c1² * v)\n      return { c0: Fp6.mul(c0, t), c1: Fp6.neg(Fp6.mul(c1, t)) }; // ((C0 * T) * T) + (-C1 * T) * w\n    },\n    div: (lhs, rhs) =>\n      Fp12.mul(lhs, typeof rhs === 'bigint' ? Fp.inv(Fp.create(rhs)) : Fp12.inv(rhs)),\n    pow: (num, power) => mod.FpPow(Fp12, num, power),\n    invertBatch: (nums) => mod.FpInvertBatch(Fp12, nums),\n    // Normalized\n    add: Fp12Add,\n    sub: Fp12Subtract,\n    mul: Fp12Multiply,\n    sqr: Fp12Square,\n    // NonNormalized stuff\n    addN: Fp12Add,\n    subN: Fp12Subtract,\n    mulN: Fp12Multiply,\n    sqrN: Fp12Square,\n\n    // Bytes utils\n    fromBytes: (b: Uint8Array): Fp12 => {\n      if (b.length !== Fp12.BYTES) throw new Error(`fromBytes wrong length=${b.length}`);\n      return {\n        c0: Fp6.fromBytes(b.subarray(0, Fp6.BYTES)),\n        c1: Fp6.fromBytes(b.subarray(Fp6.BYTES)),\n      };\n    },\n    toBytes: ({ c0, c1 }): Uint8Array => concatBytes(Fp6.toBytes(c0), Fp6.toBytes(c1)),\n    cmov: ({ c0, c1 }, { c0: r0, c1: r1 }, c) => ({\n      c0: Fp6.cmov(c0, r0, c),\n      c1: Fp6.cmov(c1, r1, c),\n    }),\n    // Utils\n    // toString() {\n    //   return `Fp12(${this.c0} + ${this.c1} * w)`;\n    // },\n    // fromTuple(c: [Fp6, Fp6]) {\n    //   return new Fp12(...c);\n    // }\n    fromBigTwelve: (t: BigintTwelve): Fp12 => ({\n      c0: Fp6.fromBigSix(t.slice(0, 6) as BigintSix),\n      c1: Fp6.fromBigSix(t.slice(6, 12) as BigintSix),\n    }),\n    // Raises to q**i -th power\n    frobeniusMap(lhs, power: number) {\n      const { c0, c1, c2 } = Fp6.frobeniusMap(lhs.c1, power);\n      const coeff = FP12_FROBENIUS_COEFFICIENTS[power % 12];\n      return {\n        c0: Fp6.frobeniusMap(lhs.c0, power),\n        c1: Fp6.create({\n          c0: Fp2.mul(c0, coeff),\n          c1: Fp2.mul(c1, coeff),\n          c2: Fp2.mul(c2, coeff),\n        }),\n      };\n    },\n    mulByFp2: ({ c0, c1 }, rhs: Fp2): Fp12 => ({\n      c0: Fp6.mulByFp2(c0, rhs),\n      c1: Fp6.mulByFp2(c1, rhs),\n    }),\n    conjugate: ({ c0, c1 }): Fp12 => ({ c0, c1: Fp6.neg(c1) }),\n    // Sparse multiplication\n    mul014: ({ c0, c1 }, o0: Fp2, o1: Fp2, o4: Fp2) => {\n      let t0 = Fp6.mul01(c0, o0, o1);\n      let t1 = Fp6.mul1(c1, o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(t1), t0), // T1 * v + T0\n        // (c1 + c0) * [o0, o1+o4] - T0 - T1\n        c1: Fp6.sub(Fp6.sub(Fp6.mul01(Fp6.add(c1, c0), o0, Fp2.add(o1, o4)), t0), t1),\n      };\n    },\n    mul034: ({ c0, c1 }, o0: Fp2, o3: Fp2, o4: Fp2) => {\n      const a = Fp6.create({\n        c0: Fp2.mul(c0.c0, o0),\n        c1: Fp2.mul(c0.c1, o0),\n        c2: Fp2.mul(c0.c2, o0),\n      });\n      const b = Fp6.mul01(c1, o3, o4);\n      const e = Fp6.mul01(Fp6.add(c0, c1), Fp2.add(o0, o3), o4);\n      return {\n        c0: Fp6.add(Fp6.mulByNonresidue(b), a),\n        c1: Fp6.sub(e, Fp6.add(a, b)),\n      };\n    },\n\n    // A cyclotomic group is a subgroup of Fp^n defined by\n    //   GΦₙ(p) = {α ∈ Fpⁿ : α^Φₙ(p) = 1}\n    // The result of any pairing is in a cyclotomic subgroup\n    // https://eprint.iacr.org/2009/565.pdf\n    _cyclotomicSquare: opts.Fp12cyclotomicSquare,\n    _cyclotomicExp: opts.Fp12cyclotomicExp,\n    // https://eprint.iacr.org/2010/354.pdf\n    // https://eprint.iacr.org/2009/565.pdf\n    finalExponentiate: opts.Fp12finalExponentiate,\n  };\n\n  return { Fp, Fp2, Fp6, Fp4Square, Fp12 };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}